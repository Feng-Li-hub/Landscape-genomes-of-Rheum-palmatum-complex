## Process VCF file
plink -vcf /Archive/data/Rheum/RPC_Resequencing/final_vcf/top11chrAll.SNPable.filter.snp.vcf -recode -out top11chrAll --allow-extra-chr  
# Convert VCF to PED/MAP format (plink recoding).
plink -file top11chrAll -make-bed -out top11chrAll --allow-extra-chr  
# Convert PED/MAP to binary format (BED/BIM/FAM). 
plink --bfile top11chrAll --recode structure --out top11chrAll_str --allow-extra-chr  
# Convert the binary format (BED/BIM/FAM) to STRUCTURE format (for population structure analysis). 

## Fis Calculation
plink --file top11chrAll --het --out top11chrAll --allow-extra-chr  
# Calculate heterozygosity for each individual (observed heterozygosity, Ho). `--het` computes heterozygosity values.
plink --file top11chrAll --hardy --out top11chrAll --allow-extra-chr  
# Perform Hardy-Weinberg equilibrium (HWE) test for all SNPs and generate P-values for each locus.
python Fis.py  
# Run custom Python script to calculate Fis, which measures genetic differentiation within subpopulations.


## Ho, Hs (Observed and Expected Heterozygosity)
python pop_ID.py  
# Run custom Python script to split individuals into populations (subgroups) based on FID and generate list files for each population.
plink --file top11chrAll --keep .list --hardy --out --allow-extra-chr  
# Calculate Hardy-Weinberg equilibrium (HWE) for each population using the list of individuals generated by the `pop_ID.py` script.
sh run_plink.sh  
# Execute a shell script to calculate HWE for each subgroup/population.
python he.py  
# Run custom Python script `he.py` to extract and compute observed heterozygosity (Ho) and expected heterozygosity (Hs) from the HWE data.
# First column in the output file is observed heterozygosity (Ho), and second column is expected heterozygosity (Hs).



## Pi (Nucleotide Diversity)
vim pop.sh  
for popname in $(cat ./pop.tsv)  
do  
  bcftools query -l /Archive/data/Rheum/RPC_Resequencing/final_vcf/top11chrAll.SNPable.filter.snp.vcf.gz | grep "$popname" > $popname.txt  
  # For each population in `pop.tsv`, extract the sample IDs for that population from the VCF file and store them in a separate text file.

  date  
  echo $popname  
done  
echo "done"  
date  
exit 0


vim pi.sh  
#!/bin/bash  
for popname in $(cat ./pop.tsv)  
do  
  # Extract each population's data from the VCF file based on IDs in the population list.
  vcftools --vcf vcf_file --keep $popname.txt --recode --recode-INFO-all --out p$popname  
  # `vcftools` extracts data for the current population from the VCF file and outputs it as a new VCF file (recode format).

  # Calculate nucleotide diversity (Pi) for each population using a sliding window of 500kb with a step size of 50kb.
  vcftools --vcf p$popname.recode.vcf --out q$popname\_pi_500kb --window-pi 500000 --window-pi-step 50000  
  # Output Pi values (nucleotide diversity) for each population with the specified window and step size.

  date  
  echo $popname  
done  
echo "done"  
date  
exit 0



############# Tajima's D Calculation
## pop.sh: Split individuals into separate populations
# Loop through each population name in the `pop.tsv` file
for popname in $(cat ./pop.tsv)
do
    # Use bcftools to query the sample names in the VCF file and filter the samples for the current population using grep
    # The result is output into a text file named after the population (e.g., popname.txt)
    bcftools query -l vcf_file | grep "$popname" > $popname.txt
    # Output the current date and time to track progress
    date
    # Print the current population name being processed
    echo $popname
done
echo "done"
date
exit 0

# Run Python script to calculate the average Pi (nucleotide diversity) for each population
python pi_avg.py  # This script calculates the average Pi value for each population

## tajima'd.sh: Calculate Tajima's D for each population
#!/bin/bash
# Loop through each population name
for popname in $(cat ./pop.tsv)
do
  # Extract the data for each population from the VCF file using vcftools and the sample list generated earlier
  # This creates a new VCF file containing only the individuals from the current population
  vcftools --vcf vcf_file --keep ${popname}.txt --recode --recode-INFO-all --out p${popname}

  # Calculate Tajima's D for the current population using vcftools
  # The -c flag enables calculation of Tajima's D for all loci, with a window size of 100,000 bp
  # The output is processed with `sed` to remove the header and `awk` to compute the average Tajima's D across loci
  vcftools --vcf p${popname}.recode.vcf --TajimaD 100000 -c | sed '1d' | awk -v pop=$pop '{td+=\$4};END{print pop"\t"td/NR};' >> pop.tajimaD.txt
  # Print the current date and population name to track progress
  date
  echo "Processed population: $popname"
done

echo "All populations processed."
date
exit 0




## Fst Calculation: 
## This step calculates the Fst between two populations.
## Fst is a measure of genetic differentiation between populations. It quantifies how different two populations are based on their allele frequencies.

# The vcftools command calculates the Weir and Cockerham's Fst between two populations using the VCF file. 
# - `--vcf` specifies the path to the input VCF file (which contains genetic variant data).
# - `--weir-fst-pop population1.txt` specifies the file containing the list of individuals for the first population.
# - `--weir-fst-pop population2.txt` specifies the file containing the list of individuals for the second population.
# - `--out` specifies the prefix for the output files, in this case `pop1VSpop2`.

vcftools --vcf /Archive/data/Rheum/RPC_Resequencing/final_vcf/top11chrAll.SNPable.filter.snp.vcf --weir-fst-pop population1.txt --weir-fst-pop population2.txt --out pop1VSpop2

#Calculate Fst between populations and summarise
# sh pop_fst.sh




